AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates VPC and subnets for Mozart deployment.
Parameters:
  S3Bucket:
    Description: S3 bucket name e.g. my-bucket must be 3 to 63 characters
    Type: String
    AllowedPattern: '[a-zA-Z0-9][a-zA-Z0-9-\.]{2,62}'
  RemoteAccessCIDR:
    Description: Remote access CIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String
  VpcCIDR:
    Default: 172.30.0.0/16
    Description: Vpc CIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String
  PublicSubnet1CIDR:
    Default: 172.30.0.0/24
    Description: Public Subnet1 CIDR in Vpc CIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String
  PublicSubnet2CIDR:
    Default: 172.30.1.0/24
    Description: Public Subnet2 CIDR in Vpc CIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String
  PublicSubnet3CIDR:
    Default: 172.30.2.0/24
    Description: Public Subnet3 CIDR in Vpc CIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String
  PrivateSubnet1CIDR:
    Default: 172.30.64.0/18
    Description: Private Subnet1 CIDR in Vpc CIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String
  PrivateSubnet2CIDR:
    Default: 172.30.128.0/18
    Description: Private Subnet2 CIDR in Vpc CIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String
  PrivateSubnet3CIDR:
    Default: 172.30.192.0/18
    Description: Private Subnet2 CIDR in Vpc CIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String
  RedshiftDatabaseName:
    Description: The name of the first database to be created when the cluster is
      created
    Type: String
    Default: mozart
    AllowedPattern: "([a-z]|[0-9])+"
  RedshiftNumberOfNodes:
    Description: The number of compute nodes in the Redshift cluster, must be >= 2
    Type: Number
    Default: 3
    MinValue: 3
  RedshiftNodeType:
    Description: The type of node to be provisioned for Redshift cluster
    Type: String
    Default: dc2.8xlarge
    AllowedValues:
    - ds2.xlarge
    - ds2.8xlarge
    - dc2.large
    - dc2.8xlarge
  RedshiftMasterUsername:
    Description: The user name that is associated with the master user account for
      the Redshift cluster that is being created
    Type: String
    Default: admin 
    AllowedPattern: "([a-z])([a-z]|[0-9])*"
  RedshiftMasterUserPassword: 
    AllowedPattern: "(?=^.{8,}$)(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$"
    Description: "Resdhift master user account: Atleast 8, lower and upper case and digits."
    NoEcho: "true"
    Type: String
  RedshiftPortNumber:
    Description: The port number on which the Redshift cluster accepts incoming connections.
    Type: Number
    Default: 5439
  MSKBrokerNodeType:
    Description: The type of node to be provisioned for MSK Broker
    Type: String
    Default: kafka.m5.2xlarge
    AllowedValues:
    - kafka.m5.large
    - kafka.m5.xlarge
    - kafka.m5.2xlarge
    - kafka.m5.4xlarge
  MSKClusterName:
    Description: The name of MSK cluster
    Type: String
    Default: "mozart"
    
  MSKNumberOfNodes:
    Description: The number of MSK Broker nodes, must be >= 2
    Type: Number
    Default: 3
    MinValue: 3

  FSxStorageCapacityGiB:
    Description: FSx Storage capacity in multiples of 3600 GiB
    Type: Number
    MinValue: 3600
    Default: 7200

  FSxS3ImportPrefix:
    Description: Optional FSx S3 prefix for importing data, e.g foo/bar/
    Type: String
    AllowedPattern: '^(?!/)[a-zA-Z0-9-_\./]*'
    Default: ""
 
  EKSEncryptSecrets:
    Description: Encrypt EKS secrets
    Type: String
    AllowedValues: [Enabled, Disabled]
    Default: Enabled
  EKSEncryptSecretsKmsKeyArn:
    Description: Encrypt EKS Secrets Key ARN (Leave blank to create)
    Type: String
    Default: ""
  KubernetesVersion:
    Description: Kubernetes Version
    Type: String
    AllowedValues: [ "1.18", "1.17" ]
    Default: "1.18"
  EKSClusterName:
    Description: The name of EKS cluster
    Type: String
    Default: "mozart"
  
  EKSNodeGroupPrivateName:
    Description: The name of EKS cluster private node group
    Type: String
    Default: "nodegroup-pvt"

  EKSNodeVolumeSizeGiB:
    Description: EKS Node volume size GiB
    Type: Number
    MinValue: 200
    Default: 200
  
  EKSNodeGroupMinSize:
    Description: EKS Node group minimum size
    Type: Number
    MinValue: 1
    Default: 1
  
  EKSNodeGroupMaxSize:
    Description: EKS Node group maximum size
    Type: Number
    MinValue: 1
    Default: 8
  
  EKSNodeGroupDesiredSize:
    Description: EKS Node group desired size
    Type: Number
    MinValue: 1
    Default: 2

  EKSNodeGroupInstanceType:
    Description: EKS Node group instance type
    Type: String
    Default: "r5n.8xlarge"
    AllowedValues:
    - m5n.4xlarge
    - m5n.8xlarge
    - m5n.12xlarge
    - m5n.16xlarge
    - m5n.24xlarge
    - r5n.4xlarge
    - r5n.8xlarge
    - r5n.12xlarge
    - r5n.16xlarge
    - r5n.24xlarge

  KeyPairName:
    Description: EC2 SSH KeyPair Name
    Type: 'AWS::EC2::KeyPair::KeyName'

  DesktopS3DeletePrefix:
    Description: S3 prefix in bucket for desktop role delete permission
    Type: String
    Default: 'rosbag'
  
Conditions:
  CreateEksKey: !And
    - !Equals [ !Ref EKSEncryptSecretsKmsKeyArn, "" ]
    - !Equals [ !Ref EKSEncryptSecrets, Enabled ]
  EnableEksEncryption: !Equals [ !Ref EKSEncryptSecrets, Enabled ]

Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref 'AWS::StackName'
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: 'kubernetes.io/role/elb'
          Value: '1'
        - Key: !Sub 'kubernetes.io/cluster/${EKSClusterName}'
          Value: 'shared'
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: 'kubernetes.io/role/elb'
          Value: '1'
        - Key: !Sub 'kubernetes.io/cluster/${EKSClusterName}'
          Value: 'shared'
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: 'kubernetes.io/role/elb'
          Value: '1'
        - Key: !Sub 'kubernetes.io/cluster/${EKSClusterName}'
          Value: 'shared'
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: 'kubernetes.io/role/internal-elb'
          Value: '1'
        - Key: !Sub 'kubernetes.io/cluster/${EKSClusterName}'
          Value: 'shared'
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: 'kubernetes.io/role/internal-elb'
          Value: '1'
        - Key: !Sub 'kubernetes.io/cluster/${EKSClusterName}'
          Value: 'shared'
  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
      CidrBlock: !Ref PrivateSubnet3CIDR
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: 'kubernetes.io/role/internal-elb'
          Value: '1'
        - Key: !Sub 'kubernetes.io/cluster/${EKSClusterName}'
          Value: 'shared'
  NATGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: GatewayToInternet
    Properties:
      AllocationId: !GetAtt 
        - NATGatewayEIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: GatewayToInternet
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref 'AWS::StackName'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ PublicRoute ]
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ PublicRoute ]
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet3RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ PublicRoute ]
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Ref 'AWS::StackName'
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PrivateSubnet1RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ PrivateRoute ]
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ PrivateRoute ]
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet3RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ PrivateRoute ]
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable
  VpcS3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: "Allow"
            Principal: "*"
            Action: 
              - "s3:*"
            Resource: "*"
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref Vpc
  VpcEcrApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: "Allow"
            Principal: "*"
            Action: 
              - "ecr:*"
            Resource: "*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: 'Interface'
      VpcId: !Ref Vpc
  VpcEcrDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: "Allow"
            Principal: "*"
            Action: 
              - "ecr:*"
            Resource: "*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: 'Interface'
      VpcId: !Ref Vpc

  VpcSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: VPC security group
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  VpcSecurityGroupIngress: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the VPC security group
      GroupId: !GetAtt VpcSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt VpcSecurityGroup.GroupId

  VpcSecurityGroupCIDRIngress: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the VPC security group CIDR
      GroupId: !GetAtt VpcSecurityGroup.GroupId
      CidrIp: !Ref VpcCIDR
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535

  VpcSecurityGroupCIDREgress: 
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Egress rule for out bound traffic
      GroupId: !GetAtt VpcSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: '0.0.0.0/0'

  DesktopSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Desktop security group
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  DesktopSecurityGroupCIDRIngress1: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from CIDR for NICE-DCV access to graphics desktop
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      CidrIp: !Ref RemoteAccessCIDR
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443

  DesktopSecurityGroupCIDRIngress2: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from CIDR for SSH access to graphics desktop
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      CidrIp: !Ref RemoteAccessCIDR
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  DesktopSecurityGroupCIDREgress: 
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Egress rule for out bound traffic
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: '0.0.0.0/0'

  RedshiftClusterRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: redshift.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
          PolicyName: 'RedshiftClusterPolicy'

  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    DependsOn: [PrivateSubnet1RouteAssociation, PrivateSubnet2RouteAssociation, PrivateSubnet3RouteAssociation]
    Properties:
      ClusterType: 'multi-node'
      Encrypted: true
      NumberOfNodes: !Ref RedshiftNumberOfNodes
      NodeType:
        Ref: RedshiftNodeType
      DBName:
        Ref: RedshiftDatabaseName
      MasterUsername:
        Ref: RedshiftMasterUsername
      MasterUserPassword:
        Ref: RedshiftMasterUserPassword
      ClusterParameterGroupName:
        Ref: RedshiftClusterParameterGroup
      VpcSecurityGroupIds:
      - Ref: RedshiftSecurityGroup
      ClusterSubnetGroupName:
        Ref: RedshiftClusterSubnetGroup
      PubliclyAccessible: false
      Port:
        Ref: RedshiftPortNumber
      IamRoles:
        - !GetAtt RedshiftClusterRole.Arn

  RedshiftClusterParameterGroup:
    Type: AWS::Redshift::ClusterParameterGroup
    Properties:
      Description: Redshift Cluster parameter group
      ParameterGroupFamily: redshift-1.0
      Parameters:
      - ParameterName: enable_user_activity_logging
        ParameterValue: 'true'

  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Redshift Cluster subnet group
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      - Ref: PrivateSubnet3

  RedshiftSecurityGroup:
    DependsOn: [VpcSecurityGroup]
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Redshift Security group
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  RedshiftSecurityGroupIngress: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from  VPC security group to RedShift database
      GroupId: !GetAtt RedshiftSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref RedshiftPortNumber
      ToPort: !Ref RedshiftPortNumber
      SourceSecurityGroupId: !GetAtt VpcSecurityGroup.GroupId
  
  RedshiftSecurityGroupCIDRIngress: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from from  VPC CIDR to RedShift database
      GroupId: !GetAtt RedshiftSecurityGroup.GroupId
      CidrIp: !Ref VpcCIDR
      IpProtocol: tcp
      FromPort: !Ref RedshiftPortNumber
      ToPort: !Ref RedshiftPortNumber
  
  RedshiftSecurityGroupCIDREgress: 
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Egress rule for out bound traffic
      GroupId: !GetAtt RedshiftSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: '0.0.0.0/0'

  MSKCluster:
    Type: 'AWS::MSK::Cluster'
    DependsOn: [PrivateSubnet1RouteAssociation, PrivateSubnet2RouteAssociation, PrivateSubnet3RouteAssociation]
    Properties:
      ClusterName: !Ref MSKClusterName
      KafkaVersion: 2.2.1
      NumberOfBrokerNodes: !Ref MSKNumberOfNodes
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: "TLS_PLAINTEXT"
          InCluster: false
      BrokerNodeGroupInfo:
        InstanceType: !Ref MSKBrokerNodeType
        ClientSubnets:
          - Ref: PrivateSubnet1
          - Ref: PrivateSubnet2
          - Ref: PrivateSubnet3
        SecurityGroups:
          - Ref: MSKSecurityGroup

  MSKSecurityGroup:
    DependsOn: [VpcSecurityGroup]
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: MSK Security group
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  MSKSecurityGroupIngress: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from VPC security group to MSK cluster endpoint
      GroupId: !GetAtt MSKSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 9092
      ToPort: 9094
      SourceSecurityGroupId: !GetAtt VpcSecurityGroup.GroupId
  
  MSKSecurityGroupCIDRIngress: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from VPC CIDR to MSK cluster endpoint
      GroupId: !GetAtt MSKSecurityGroup.GroupId
      CidrIp: !Ref VpcCIDR
      IpProtocol: tcp
      FromPort: 9092
      ToPort: 9094

  MSKSecurityGroupCIDREgress: 
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Egress rule for out bound traffic
      GroupId: !GetAtt MSKSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: '0.0.0.0/0'

  EksControlPlaneRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - eks.amazonaws.com
              - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
          - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy'
          - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSServicePolicy'
  
  KMSKey:
    Condition: CreateEksKey
    Type: "AWS::KMS::Key"
    Properties:
      EnableKeyRotation: true
      KeyPolicy: {
        "Version": "2012-10-17",
        "Id": "key-default-1",
        "Statement": [
          {
            "Sid": "Enable IAM User Permissions",
            "Effect": "Allow",
            "Principal": {
              "AWS": !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            },
            "Action": "kms:*",
            "Resource": "*"
          }
        ]
      }

  EksControlPlane:
    Type: "AWS::EKS::Cluster"
    DependsOn: [MSKCluster, RedshiftCluster]
    Properties:
      Name: !Ref EKSClusterName
      ResourcesVpcConfig:
        SecurityGroupIds: 
        - !GetAtt VpcSecurityGroup.GroupId
        SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
      EncryptionConfig: !If
        - EnableEksEncryption
        - - Resources: [ secrets ]
            Provider:
              KeyArn: !If [ CreateEksKey, !GetAtt KMSKey.Arn, !Ref EKSEncryptSecretsKmsKeyArn ]
        - !Ref AWS::NoValue
      RoleArn: !GetAtt EksControlPlaneRole.Arn
      Version: !Ref KubernetesVersion

  EksNodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "autoscaling:DescribeAutoScalingInstances"
                  - "autoscaling:DescribeLaunchConfigurations"
                  - "autoscaling:DescribeTags"
                  - "autoscaling:SetDesiredCapacity"
                  - "autoscaling:TerminateInstanceInAutoScalingGroup"
                  - "ec2:DescribeLaunchTemplateVersions"
                Resource: '*'
          PolicyName: 'EKSNodeAutoScalerPolicy'
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "iam:CreateServiceLinkedRole"
                Resource:  "*"
                Condition:
                  StringLike:
                    iam:AWSServiceName:
                      - "fsx.amazonaws.com"
              - Effect: Allow
                Action: 
                  - "iam:CreateServiceLinkedRole"
                  - "iam:AttachRolePolicy"
                  - "iam:PutRolePolicy"
                Resource:  "arn:aws:iam::*:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/*"
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                Resource: '*'
              - Effect: Allow
                Action: 
                  - "fsx:CreateFileSystem"
                  - "fsx:DeleteFileSystem"
                  - "fsx:DescribeFileSystems"
                Resource:  "*"
          PolicyName: 'EKSNodeFSxCNIPolicy'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      Path: /

  EKSNodeGroupPrivate:
    Type: AWS::EKS::Nodegroup
    Properties: 
      AmiType: "AL2_x86_64"
      ClusterName: !Ref EksControlPlane
      DiskSize: !Ref EKSNodeVolumeSizeGiB
      InstanceTypes: 
      - !Ref EKSNodeGroupInstanceType
      NodegroupName: !Ref EKSNodeGroupPrivateName
      NodeRole: !GetAtt EksNodeRole.Arn
      RemoteAccess:
        Ec2SshKey: !Ref KeyPairName
      ScalingConfig: 
          DesiredSize: !Ref EKSNodeGroupDesiredSize
          MaxSize: !Ref EKSNodeGroupMaxSize
          MinSize: !Ref EKSNodeGroupMinSize
      Labels:
        nodegroup: 'mozart-data-service'
      Subnets: 
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      - Ref: PrivateSubnet3

  FSxFileSystem:
    Type: AWS::FSx::FileSystem
    DependsOn: [EKSNodeGroupPrivate]
    Properties: 
      FileSystemType: 'LUSTRE'
      LustreConfiguration: 
        ImportPath: !Sub 's3://${S3Bucket}/${FSxS3ImportPrefix}'
        DeploymentType: SCRATCH_2
        ImportedFileChunkSize: 512000
      SecurityGroupIds: 
        - !GetAtt VpcSecurityGroup.GroupId
      StorageCapacity: !Ref FSxStorageCapacityGiB
      StorageType: 'SSD'
      SubnetIds: 
        - Ref: PrivateSubnet1
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    DependsOn: [EKSNodeGroupPrivate]
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Encrypted : true
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  MountTarget1:
    Type: 'AWS::EFS::MountTarget'
    DependsOn: [ PrivateSubnet1RouteAssociation, VpcSecurityGroupIngress ]
    Properties:
      FileSystemId:  !Ref EFSFileSystem
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
        - !Ref VpcSecurityGroup
  MountTarget2:
    Type: 'AWS::EFS::MountTarget'
    DependsOn: [ PrivateSubnet2RouteAssociation, VpcSecurityGroupIngress ]
    Properties:
      FileSystemId: !Ref EFSFileSystem 
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref VpcSecurityGroup
  MountTarget3:
    Type: 'AWS::EFS::MountTarget'
    DependsOn: [ PrivateSubnet3RouteAssociation, VpcSecurityGroupIngress ]
    Properties:
      FileSystemId: !Ref EFSFileSystem 
      SubnetId: !Ref PrivateSubnet3
      SecurityGroups:
        - !Ref VpcSecurityGroup

  DesktopRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:List*"
                  - "s3:Get*"
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
              - Effect: Allow
                Action:
                  - "s3:DeleteObject*"
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}/${DesktopS3DeletePrefix}/*'
          PolicyName: 'DesktopS3Policy'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonFSxReadOnlyAccess"
      Path: /

  DesktopInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "DesktopRole"

Outputs:
  VpcSecurityGroup:
    Value:
      Fn::Join:
        - ''
        - - '['
          - '''' 
          - !GetAtt VpcSecurityGroup.GroupId
          - '''' 
          - ']'
  VpcPublicSubnets:
    Value:
      Fn::Join:
        - ''
        - - '['
          - '''' 
          - !Ref PublicSubnet1
          - '''' 
          - ','
          - '''' 
          - !Ref PublicSubnet2
          - '''' 
          - ','
          - '''' 
          - !Ref PublicSubnet3
          - '''' 
          - ']'
  VpcPrivateSubnets:
    Value:
      Fn::Join:
        - ''
        - - '['
          - '''' 
          - !Ref PrivateSubnet1
          - '''' 
          - ','
          - '''' 
          - !Ref PrivateSubnet2
          - '''' 
          - ','
          - '''' 
          - !Ref PrivateSubnet3
          - '''' 
          - ']'
  RedshiftClusterEndpoint:
    Description: Redshit Cluster Endpoint
    Value: !Sub "${RedshiftCluster.Endpoint.Address}:${RedshiftCluster.Endpoint.Port}"
  RedshiftClusterName:
    Description: Name of Redshift cluster
    Value:
      Ref: RedshiftCluster
  RedshiftParameterGroupName:
    Description: Name of Redshift parameter group
    Value:
      Ref: RedshiftClusterParameterGroup
  RedshiftClusterSubnetGroupName:
    Description: Name of Redshift cluster subnet group
    Value:
      Ref: RedshiftClusterSubnetGroup
  RedshiftClusterSecurityGroupName:
    Description: Name of Redshift cluster security group
    Value:
      Ref: RedshiftSecurityGroup
  RedshitClusterRole:
    Description: Redshift Cluster Iam role
    Value: !GetAtt RedshiftClusterRole.Arn
  DesktopRole:
    Description: Desktop IAM role
    Value: !GetAtt DesktopRole.Arn
  DesktopInstanceProfile:
    Description: Desktop instance profile
    Value:
      Ref: DesktopInstanceProfile
  DesktopSecurityGroup:
    Description: Desktop security group
    Value:
      Ref: DesktopSecurityGroup
  FSxFileSystemId:
    Description: FSx for Luster file system id
    Value: !Ref FSxFileSystem
  EFSFileSystemId:
    Description: EFS file system id
    Value: !Ref EFSFileSystem
  EksArn:
    Description: EKS ControlPlane ARN
    Value: !GetAtt EksControlPlane.Arn
  EKSEndpoint:
    Description: EKS Endpoint
    Value: !GetAtt EksControlPlane.Endpoint
  EKSName:
    Description: EKS Cluster name
    Value: !Ref EksControlPlane
  MSKCluster:
    Description: MSK Cluster ARN
    Value: !Ref MSKCluster
  
